<!DOCTYPE html>

<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

      <!-- bootstrap -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
    integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <title>Activity Recognition</title>
  </head>

  <body>

    <div class="container" id="containerPage">
      <br/>

      <div class="jumbotron text-center" id="box">
        <h1>Activity Recognition </h1>
        <p> Press the botton to start the transmission </p>

        <div>
          <button type="button" class="btn btn-primary" id="start">Start</button>
          &nbsp;&nbsp;&nbsp;&nbsp;
          <button type="button" class="btn btn-danger" id="stop">Stop</button>
        </div>

        <br/><hr/>
        <div>
          <h4>Accelerometer</h4>
          <table align="center">
            <tr><td>Axis X &nbsp;</td><td id="accelerometerX">0</td></tr>
            <tr><td>Axis Y &nbsp;</td><td id="accelerometerY">0</td></tr>
            <tr><td>Axis Z &nbsp;</td><td id="accelerometerZ">0</td></tr>
          </table>
        </div>

        <br/><hr/>
        <div>
          <h4>Status</h4>
          <i id="status"> Still </i>
        </div>
      </div>
    </div>

  </body>


  <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>

  <!-- sensors code -->
  <script src="/socket.io/socket.io.js"></script>

  <script type="text/javascript" charset="utf-8">
    let accelerometer = null;
    try {

        // initializa accelerometer and socket.io
        var socket = io();
        accelerometer = new LinearAccelerationSensor({ referenceFrame: 'device', frequency:1 });
        walking = 0

        // erros handler
        accelerometer.addEventListener('error', event => {
            if (event.error.name === 'NotAllowedError') {
                alert('The browser does not have the permission to use the sensor');
            } else if (event.error.name === 'NotReadableError' ) {
                alert('Cannot connect to the sensor.');
            }
        });

        // handling reading and send elaborates values
        accelerometer.addEventListener('reading', () => {
          var now = parseInt(Date.now());
          let x = accelerometer.x;
          let y = accelerometer.y;
          let z = accelerometer.z
          $('#accelerometerX').html(x);
          $('#accelerometerY').html(y);
          $('#accelerometerZ').html(z);

        /////// comment thi part for the cloud-based /////
          model = Math.sqrt(x*x + y*y + z*z);
          if (model > 0.6) {
            walking = 1
            $('#status').html('walking');
          } else {
            walking = 0
            $('#status').html('Still');
          }
        //////////////////////////////////////////////////

          data = {
            date: now,
            status: walking,    ///set status to 2 for cloud-based
            accx: x,
            accy: y,
            accz: z
          }
          socket.emit('accelerometer', data);
        });

        // handling stop button
        $('#stop').click( () =>{
          accelerometer.stop()
          $('#accelerometerX').html(0);
          $('#accelerometerY').html(0);
          $('#accelerometerZ').html(0);
        });

        // handling start button
        $('#start').click( () =>{
          accelerometer.start()
        });

    } catch (error) {
        if (error.name === 'SecurityError') {
            alert('Sensor construction was blocked by a security policy.');
        } else if (error.name === 'ReferenceError') {
            alert('Sensor is not supported by the User Agent.');
        } else {
            throw error;
        }
    }

  </script>


</html>
